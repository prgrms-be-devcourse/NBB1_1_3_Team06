buildscript {
    ext.kotlin_version = '2.0.21'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.2.7'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.diffplug.spotless' version '6.25.0'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    group = 'com.nbe2'
    version = '0.0.1'

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'java-library'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.spotless'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'

        // Kotest
        testImplementation 'io.kotest:kotest-runner-junit5:5.6.2'
        testImplementation 'io.kotest:kotest-assertions-core:5.6.2'
        // MockK
        testImplementation 'io.mockk:mockk:1.13.5'
    }

    test() {
        useJUnitPlatform()
    }

    spotless {
        java {
            googleJavaFormat().aosp()
            importOrder('java', 'javax', 'jakarta', 'org', 'lombok', 'com')
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    kotlin {
        jvmToolchain {17}
    }
}

tasks.register("addGitPreCommitHook", Copy) {
    from 'script/pre-commit'
    into '.git/hooks'
}

bootJar {
    enabled = false
}

project(':ea-application') {
    bootJar {
        enabled = false
    }

    jar {
        enabled = false
    }
}







